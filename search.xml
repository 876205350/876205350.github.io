<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[python安装链接mysql数据库]]></title>
    <url>%2F2019%2F08%2F10%2Fpython%E4%BD%BF%E7%94%A8%E9%93%BE%E6%8E%A5mysql%E6%95%B0%E6%8D%AE%E5%BA%93%2F</url>
    <content type="text"><![CDATA[python 如何使用 mysql 以及配置 首先Django 2.2支持Python 3.5,3.6和3.7 python3自带的pip 首先我们要知道python链接mysql需要三方包的，目前主流的方式就是pymysql 和 mysqlclient（也就是Python3版本的MySQLdb）。一、pymysql1）纯Python实现的，安装简单（直接pip安装） 2) 由于纯Python实现的，可以很好的跟gevent框架结合 二、mysqlclient1）是一个C扩展模块,编译安装可能会导致报各种错误,明显没有pymysql方便 2）速度快； 安装使用pymysql12]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[总结]]></title>
    <url>%2F2019%2F06%2F26%2Finterview%2F</url>
    <content type="text"><![CDATA[总结 第一次面试今天面了第一家公司，去了以后填写了申请报表人事看到工作经历没有问了我一句，感觉没什么希望了。公司名称:建培教育简介:小型，培训教育类 讲一下tp3.2中的查询方法如何实现的。 讲一下你对MVC的理解。 php中的接口和抽象类的区别。 CSS中的四种定位。 人事打断后问了一下之前做过哪些项目，然后就说公司要招一些有工作经验的人。 第二次面试公司名称:北京速通网电子商务有限公司简介: 企业年轻人较多有活力 一面:人力资源主管 一个团队中什么最重要 你的优势是什么 你有什么想了解的 二面:技术面 简单做一下自我介绍 在学校参加过哪些课外活动 聊了一下简历上的项目 说出你用过的PHP中操作数组的函数 如何截取一个字符串，获取字符串的长度 Linux下搭建环境，基本命令会吗 项目中有用到redis吗 数据库中数据量过大如何优化查询语句 get和post的区别 大概问了这些问题感觉自己基础薄弱！明明知道面上的希望不大但还是主动问了人力资源主管面试结果，他说和团队不匹配，并不是技术问题。 第三次面试公司名称：百变悟空科技一面：HR 介绍一下公司主要业务 问了一下基本信息，期望薪资。 一道冒泡排序题 二面：技术面 简单做一下自我介绍 数据库优化方面知识myisam和innodb的区别innodb事务数据库的锁复合索引 nosql中的redis数据类型 简单聊了一下简历上的项目 第四次面试公司名称：学知在线教育只有技术面 说一下laravel路由 谈一下使用过的laravel中间件 PHP常用的魔术方法 说一下AOP和OOP 常用的git命令 Vue中的路由参数如何传递 myisam和innodb的区别 讲一下laravel中的ORM 聊了一下项目 逻辑题：N个火柴，没根火柴燃烧完需要1个小时，火柴只能被点燃，怎样得出时间经过45分钟。 第五次面试公司名称：北京果粒科技直接技术： 简单介绍一下自己 说一下用过的PHP数组处理函数 使用过PHP7吗？ 构造函数与析构函数 public，private，protect修饰类的区别 公司分的任务没有在当天按时完成怎么办？ 项目评估一个月完成，现需要半个月完成怎么办？ 给你加派人手你会如何分配项目 聊一下项目，问最近有接触什么新技术]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git基础命令]]></title>
    <url>%2F2018%2F06%2F14%2Farticle-git%2F</url>
    <content type="text"><![CDATA[总结一下git的命令和个人理解 ##安装gitWindows上安装git可以从git官网下载安装，一直默认即可。在开始菜单中找到Git Bash 点击后会出现命令行窗体（可以看到版本号）安装完成后进行配置，命令行输入:12git config --global user.name "Your Name"git config --global user.email "email@example.com" 因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。 ##说一下git clonegit clone支持https和git（即ssh）两种方式下载源码: 当使用git方式下载时，如果没有配置过ssh key，则会有如下错误提示:介绍一下如何配置git的ssh key 首先检查一下刚刚的用户名邮箱:1git config --global --list 然后执行以下命令生成秘钥:1ssh-keygen -t rsa -C "你的邮箱" 点击回车需要几步操作: 1.确认秘钥的保存路径（如果不需要改路径则直接回车）；2.如果上一步置顶的保存路径下已经有秘钥文件，则需要确认是否覆盖（如果之前的秘钥不再需要则直接回车覆盖，如需要则手动拷贝到其他目录后再覆盖）；3.创建密码（如果不需要密码则直接回车）；4.确认密码；在指定路径下会有id_rsa和id_rsa.pub两个文件打开你的github点击头像-&gt;settings左侧列表的SSH and GPG keys 点击绿色的New SSH key然后用文本工具打开之前生成的id_rsa.pub文件，把内容拷贝到key下面的输入框，并为这个key定义一个名称（通常用来区分不同主机），然后保存：尝试用git方式下载，可以看到已经可以正常下载: 以上几步完成以后此时你就和git有了一对一联系，上传下载就如同有了令牌一样 git的基本命令git是什么git是一种版本控制器. 更直白说,团队开发时,管理代码用的软件. 说一下安装Window环境:到 https://git-for-windows.github.io/ 下载软件, 双击,一路”Next”,安装完毕. 到开始菜单找”git bash”,如下图Linux环境安装git:12# ubuntu,debian# $ sudo apt-get install git centos,redhat系统1# yum install git 代码管理创建版本库123$ cd E:/ (集成环境进入到www目录下)$ mkdir test$ git init 注意: 不要把仓库建在中文目录下,可能出问题. .git是个隐藏目录,不要乱碰.(你的每一次代码修改它都帮你记录着呢) 添加文件在刚刚创建的test目下创建一个index.php如图：查看仓库状态1$ git status 可见,此时git发现有一个新文件,但并没有把此文件纳入管理. 我们需要两步,让git仓库管理index.phpgit add index.php把index.php提交到暂存区git commit -m “新建index.php”把index.php提交到版本库12$ git add index.php$ git commit -m &quot;新建index.php&quot; 修改文件修改后的文件需要重新提交到暂存区然后到版本库12$ git add index.php$ git commit -m &quot;修改第2行&quot; 删除文件用rm命令删除文件,并直接commit,提交到版本库例:先创建一个foo.php,供练习删除用12345678910111213$ touch foo.php # 创建foo.php $ git add foo.php $ git commit -m &quot;练习删除用&quot; $ ls foo.php index.php# 开始删除 $ git rm foo.php rm &apos;foo.php&apos;$ git commit -m &quot;删除foo.php&quot; [master e4dc37c] 删除foo.php 1 file changed, 0 insertions(+), 0 deletions(-) delete mode 100644 foo.php$ ls index.php 远程仓库经过前面的练习,你在本地的仓库里管理代码已经比较熟练了.但如果是团队开发,如何配合起来呢?我们可以把版本仓库放在互联网上. 开发者把自己最新的版本推到线上仓库, 同时,把线上仓库的最新代码,拉到自己本地. 这样,就可以配合工作了. 注册git在线仓库的账号国外: http://www.github.com国内: http://git.oschina.net 创建项目注册后,”新建项目”,我们先建一个测试项目为此项目提供的仓库地址有2个. http地址:https://github.com/876205350/lianxi.git ssh地址: git@github.com:876205350/lianxi.git前面因为ssh key已经配好使用ssh更方便不过下面我们依然使用http地址 把代码推送到远程仓库为本地库添加远程库$ git remote add origin https://github.com/876205350/lianxi.git意思是:添加1个远程库,代号是origin,地址是 https://....lianxi.gitpush 推代码$git push -u origin master 意思是,把本地的版本(默认是master),推到代号为origin的远程库去.这个过程会弹出github登录框，让你输入用户名/密码以后再使用http就不用输入账号密码 代码管理学习git,你必须要了解3个重要区域.工作区, 即开发者的工作目录.暂存区, 修改已被记录,但尚未录入版本库的区域.版本库, 存储变化日志及版本信息. 工作区-&gt;add-&gt;到暂存区-&gt;commit-&gt;仓库 文件操作添加多个文件git add #添加file1,file2git add *.txt #添加当前目录下的.txt文档git add . #添加当前目录的所有变化 删除文件git rm 移动或改名git mv 源文件 新文件例移动:git mv config.php ./inc/config.php改名:git mv config.php config.inc.php 改动日志每个文件/目录发生的版本变化,我们都可以追溯.命令为:”git log “常用格式: git log 查看项目的日志git log 查看某文件的日志git log . 查看本目录的日志例: git log 显示如下:123456789101112commit 37285a5a9bc5b62609c5e81dacc4daafab1b9600Author: lucy &lt;lucy@xx.com&gt;Date: Thu Nov 12 17:09:04 2015 +0800 new readme.txt ... ...commit c7dfbb8a7ab6c6377040a20c851216572a79d0a0 Author: yanshiba &lt;yanshiba@gmail.com&gt; Date: Mon Nov 9 15:08:05 2015 +0800 新建index.php 如果感觉log有点乱,可以git log –pretty=oneline,让日志单行显示.12337285a5a9bc5b62609c5e81dacc4daafab1b9600 new readme.txt ... c7dfbb8a7ab6c6377040a20c851216572a79d0a0 新建index.php 切换版本git reflog 查看版本变化12345$ git reflog 5d5df85 HEAD@&#123;0&#125;: commit: four 6207e59 HEAD@&#123;1&#125;: commit: three 70110b9 HEAD@&#123;2&#125;: commit: two bc65223 HEAD@&#123;3&#125;: commit (initial): one HEAD指向当前版本5d5df86,切换为head的前1版本,git reset –hard HEAD^切换为head的前2版本,git reset –hard HEAD^^切换为head的前100版本,git reset –hard HEAD~100 实例:12$ git reset --hard HEAD^^ HEAD is now at 70110b9 two 也可以利用版本号来切换,例12$ git reset --hard 6207e59HEAD is now at 6207e59 three 分支管理分支有什么用？在开发中,遇到这样的情况怎么办?网站已有支付宝在线支付功能,要添加”微信支付”.修改了3个文件, wechat.php,pay.php 刚做到一半,突然有个紧急bug: 支付宝支付后不能修改订单状态.你需要立即马上修改这个bug,需要修改的文件是,ali.php,pay.php. 问题是:pay.php,已经被你修改过,而且尚未完成.直接在此基础上改,肯定有问题.把pay.php倒回去? 那我之前的工作白费了. 此时你肯定会想: 在做”微信支付”时,能否把仓库复制一份,在此副本上修改,不影响原仓库的内容.修改完毕后,再把副本上的修改合并过去.好的,这时你已经有了分支的思想. 前面见过的master,即是代码的主干分支,事实上,在实际的开发中,往往不会直接修改和提交到master分支上.而是创建一个dev分支,在dev分支上,修改测试,没问题了,再把dev分支合并到master上. 如果有了分支,刚才的难题就好解决了,如下图:在做”微信支付”时,我们创建一个wechat分支.把wechat分支commit,此时,master分支内容不会变,因为分支不同. 当遇到紧急bug时,创建一个AliBug分支.修复bug后,把AliBug分支合并到master分支上. 再次从容切换到wechat分支上,接着开发”微信支付”功能,开发完毕后,把wechat分支合并到master分支上. 查看分支查看所有分支git branch列12git branch * master # 说明只有master分支,且处于master分支. 创建分支创建dev分支 git branch dev1234git branch dev # 创建dev分支git branch #查看分支 dev * master # dev分支创建成功,但仍处于master分支 切换分支切换到dev分支 git checkout dev再次查看123$ git branch * dev master # 已切换到dev分支上 合并分支当我们在dev上开发某功能,并测试通过后,可以把dev的内容合并到master分支.例:当前的readme.txt 内容为”so so”,在dev分支下,添加一行”from dev”并提交12git add readme.txt git commit -m &quot;mod in dev&quot; 再次切换到master,查看readme.txt的内容,仍为’so so’合并dev分支,git merge dev, 如下:12345$ git merge dev Updating c5364fe..412926b Fast-forward readme.txt | 1 + 1 file changed, 1 insertion(+) 再次查看readme.txt的内容,已变为”soso from dev”; 删除分支12git branch -d dev Deleted branch dev (was 412926b). 快速创建和切换分支 快速创建和切换分支git checkout -b dev # 创建dev分支并立即切换到dev分支即起到git branch dev和git checkout dev的共同作用. 远程仓库查看远程仓库查看远程仓库:git remote查看仓库地址:git remote -v例:123git remote -v origin https://git.oschina.net/lianshou/test.git (fetch) origin https://git.oschina.net/lianshou/test.git (push) 删除远程库命令:git remote remove &lt;远程库名&gt;示例:git remote remove origin 添加远程库命令:git remote add &lt;远程库名&gt; &lt;远程库地址&gt; 示例:1git remote add origin https://github.com/876205350/lianxi.git 注: 远程库名一般叫origin,但并非强制,你可以自己起名.例:git remote add online https://github.com/876205350/lianxi.git 修改远程库名称git remote rename &lt;旧名称&gt; &lt;新名称&gt;例:git remote rename online oschina 公钥登陆配置请看 ssh key配置 配置ssh格式的远程仓库地址git remote add origin git@github.com:876205350/lianxi.git push本地仓库到远程,发现不用填密码了git push -u origin master 未完待续…………]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>Testing</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[laravle 中 validate.php 汉化]]></title>
    <url>%2F2017%2F08%2F30%2Fnew-article%2F</url>
    <content type="text"><![CDATA[错误提示汉化:1laravel 的验证机制很好用，但是默认提示文本是英文，相信很多小伙伴很苦恼吧。 位于\resources\lang\en\validation.php里面的提示全是英文 与en同级创建文件夹zh将en文件夹里内容粘贴到zh 将zh文件夹下的validation.php内容替换123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100&lt;?phpreturn [ 'unique' =&gt; ':attribute 已存在', 'accepted' =&gt; ':attribute 是被接受的', 'active_url' =&gt; ':attribute 必须是一个合法的 URL', 'after' =&gt; ':attribute 必须是 :date 之后的一个日期', 'alpha' =&gt; ':attribute 必须全部由字母字符构成。', 'alpha_dash' =&gt; ':attribute 必须全部由字母、数字、中划线或下划线字符构成', 'alpha_num' =&gt; ':attribute 必须全部由字母和数字构成', 'array' =&gt; ':attribute 必须是个数组', 'before' =&gt; ':attribute 必须是 :date 之前的一个日期', 'between' =&gt; [ 'numeric' =&gt; ':attribute 必须在 :min 到 :max 之间', 'file' =&gt; ':attribute 必须在 :min 到 :max KB之间', 'string' =&gt; ':attribute 必须在 :min 到 :max 个字符之间', 'array' =&gt; ':attribute 必须在 :min 到 :max 项之间', ], 'boolean' =&gt; ':attribute 字符必须是 true 或 false', 'confirmed' =&gt; ':attribute 二次确认不匹配', 'date' =&gt; ':attribute 必须是一个合法的日期', 'date_format' =&gt; ':attribute 与给定的格式 :format 不符合', 'different' =&gt; ':attribute 必须不同于:other', 'digits' =&gt; ':attribute 必须是 :digits 位', 'digits_between' =&gt; ':attribute 必须在 :min and :max 位之间', 'email' =&gt; ':attribute 必须是一个合法的电子邮件地址。', 'filled' =&gt; ':attribute 的字段是必填的', 'exists' =&gt; '选定的 :attribute 是无效的', 'image' =&gt; ':attribute 必须是一个图片 (jpeg, png, bmp 或者 gif)', 'in' =&gt; '选定的 :attribute 是无效的', 'integer' =&gt; ':attribute 必须是个整数', 'ip' =&gt; ':attribute 必须是一个合法的 IP 地址。', 'max' =&gt; [ 'numeric' =&gt; ':attribute 的最大长度为 :max 位', 'file' =&gt; ':attribute 的最大为 :max', 'string' =&gt; ':attribute 的最大长度为 :max 字符', 'array' =&gt; ':attribute 的最大个数为 :max 个', ], 'mimes' =&gt; ':attribute 的文件类型必须是:values', 'min' =&gt; [ 'numeric' =&gt; ':attribute 的最小长度为 :min 位', 'string' =&gt; ':attribute 的最小长度为 :min 字符', 'file' =&gt; ':attribute 大小至少为:min KB', 'array' =&gt; ':attribute 至少有 :min 项', ], 'not_in' =&gt; '选定的 :attribute 是无效的', 'numeric' =&gt; ':attribute 必须是数字', 'regex' =&gt; ':attribute 格式是无效的', 'required' =&gt; ':attribute 字段必须填写', 'required_if' =&gt; ':attribute 字段是必须的当 :other 是 :value', 'required_with' =&gt; ':attribute 字段是必须的当 :values 是存在的', 'required_with_all' =&gt; ':attribute 字段是必须的当 :values 是存在的', 'required_without' =&gt; ':attribute 字段是必须的当 :values 是不存在的', 'required_without_all' =&gt; ':attribute 字段是必须的当 没有一个 :values 是存在的', 'same' =&gt; ':attribute 和 :other 必须匹配', 'size' =&gt; [ 'numeric' =&gt; ':attribute 必须是 :size 位', 'file' =&gt; ':attribute 必须是 :size KB', 'string' =&gt; ':attribute 必须是 :size 个字符', 'array' =&gt; ':attribute 必须包括 :size 项', ], 'string' =&gt; ':attribute 必须是字符串', 'unique' =&gt; ':attribute 已经采取.', 'uploaded' =&gt; ':attribute 上传失败', 'url' =&gt; ':attribute 无效的格式', 'timezone' =&gt; ':attribute 必须个有效的时区', /* |-------------------------------------------------------------------------- | Custom Validation Language Lines |-------------------------------------------------------------------------- | | Here you may specify custom validation messages for attributes using the | convention "attribute.rule" to name the lines. This makes it quick to | specify a specific custom language line for a given attribute rule. | */ 'custom' =&gt; [ 'attribute-name' =&gt; [ 'rule-name' =&gt; 'custom-message', ], ], /* |-------------------------------------------------------------------------- | Custom Validation Attributes |-------------------------------------------------------------------------- | | The following language lines are used to swap attribute place-holders | with something more reader friendly such as E-Mail Address instead | of "email". This simply helps us make messages a little cleaner. | */ 'attributes' =&gt; [ 'username' =&gt; '用户名', 'account' =&gt; '账号', 'captcha' =&gt; '验证码', 'mobile' =&gt; '手机号', 'password' =&gt; '密码', 'content' =&gt; '内容', 'identity' =&gt; '手机号/用户名', ],]; 最后一步打开config/app.php 文件 将其中 ‘locale’ =&gt; ‘en’,修改为’locale’ =&gt; ‘zh’, 即可]]></content>
      <categories>
        <category>laravel</category>
      </categories>
      <tags>
        <tag>Laravel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql优化（四）理想的索引与排序]]></title>
    <url>%2F2017%2F05%2F20%2Fmysql%E4%BC%98%E5%8C%96%EF%BC%88%E5%9B%9B%EF%BC%89%E7%90%86%E6%83%B3%E7%8A%B6%E6%80%81%E7%B4%A2%E5%BC%95%E4%B8%8E%E6%8E%92%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[理想的索引 索引与排序 理想的索引如何选择索引1 查询频繁 2 区分度高 3 长度小 （占用内存少）4 尽可能覆盖常用查询字段 列如：区分度：100万用户，性别基本上男、女各50万 区分度低索引长度直接影响索引文件的大小，影响增删改的速度，并间接影响查询速度（占用内存多） 针对列中的值，从左往右截取部分来建立索引1 截取的越短，重复度越高，区分度越小，索引效果越不好。2 截取的越长，重复度越低，区分度越高，索引效果越好，但带来的影响越大，增删改慢并且影响查询速度。所以我们要在 区分度 + 长度 两者取一个平衡。 1 截取不同长度并测试其区分度。对于一般的系统应用，区分度能够达到0.1索引的性能就可以接受 （一行索引对应十条数据） 2 对于左前缀不易区分的列，建立索引技巧左前缀不易区分比如网址都是以（http://www）开头列的前11个字符都是一样的不易区分有以下两种方法：(1) 把列内容倒过来存储并建立索引moc.udiab.www//:ptth这样左前缀区分大(2) 伪hash索引效果同样存储url hash列 12345678910111213create table t10( id int primary key, url char(60) not null default&apos;&apos;);insert into t10 values(1,&apos;http://www.baidu.com&apos;),(2,&apos;http://www.sina.com&apos;),(3,&apos;http://www.sohu.cn&apos;),(4,&apos;http://www.jiaguo.net&apos;),(5,&apos;http://www.go.cn&apos;),alert table t10 add urlcrc int unsigned not null 函数crc32(url)计算URL列存入urlcrc列 查询时：select * from t10 where urlcrc = crc32(‘http://www.baidu.com‘) 3 多列索引多列索引的考虑因素列的查询频率，列的区分度注意一定要结合实际业务场景以商城为例 goods表中的cat_id(栏目),brand_id(品牌)做多列索引从计算数据得出区分度Brand_id区分度更高但是从商城实际业务看，顾客一般先选大分类-&gt;小分类-&gt;品牌最终选择（1）index(cat_id,brand_id), （2）index(cat_id,shop_price)来建立索引（建立两个复合索引）1 ，2两个索引称为冗余索引甚至可以再加（3）index（cat_id，brand_id，shop_price）1 3放在一起就是重复索引 但（3）中的前2列和（1）中的前两列一样，再去掉（1）最终建立：Index（cat_id，shop_price）和index（cat_id，brand_id,shop_price）这两个复合索引 索引与排序排序可能发生2种情况1 对于索引覆盖直接在索引上查询，就是有序的，using index在innodb引擎中沿着索引字段排序查询，也是自然有序的，而对于mysisam引擎，如果按某索引字段排序如id 但取出的字段中有未索引字段，myisam做法不是索引-&gt;回行，索引-&gt;回行。而是先取出所有行，再进行排序。 2 先取出数据，形成临时表做filesort文件排序，但文件可能在磁盘上，也可能在内存中我们的争取的目标…..取出来的数据本身就是有序的,利用索引来排序比如表：goods商品（cat_id，shop_price）组成联合索引Where cat_id=N order by shop_price 可以利用索引排序Select goods_id，cat_id，shop_price from goods order by shop_price,//using where 按照shop_price索引取的结果，本身就是有序的 Select goods_id,cat_id,shop_price from goods order by click_count//using filesort 用到文件排序即取出的结果再次排序]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql优化（三）Btree聚簇非聚簇]]></title>
    <url>%2F2017%2F05%2F16%2Fmysql%E4%BC%98%E5%8C%96%EF%BC%88%E4%B8%89%EF%BC%89Btree%E8%81%9A%E7%B0%87%E9%9D%9E%E8%81%9A%E7%B0%87%2F</url>
    <content type="text"><![CDATA[Myisam与innodb引擎聚簇非聚簇 Myisam与innodb引擎，索引文件的异同Myisam索引与数据关系是，索引与数据分离，每个索引都指向在磁盘上的位置，也就是说主索引和次索引都指向物理行（磁盘位置） 我们称之为非聚簇索引。 Innodb索引与数据的关系，直接在索引树中，直接存储行的数据，次索引指向对主键的引用我们称之为聚簇索引。 如图所示Myisam与innodb引擎存储索引对比 注意：innodb来说1 主键索引即存储索引值，又在叶子中存储行的数据 2 如果没有主键（primary key）则会unique key做主键 3 如果没有unique key系统生成一个内部的rowid做主键 4 像innodb中，主键索引结构中即存储主键值又存储行数据这种结构称之为”聚簇索引” 聚簇索引优势：根据主键查询条目比较少时，不用回行（数据就在主键节点下）劣势：如果碰到不规则数据插入时，造成频繁的树上叶节点分裂 聚簇索引的页分裂过程 二叉平衡树插入数据会打破树的平衡，需要重新排列 二叉排序树的平衡旋转图例1 LL：右单旋转 2 RR左单旋转 3 LR平衡旋转：先左后右 4 RL平衡旋转：先右后左 高性能索引策略对于innodb而言因为节点下有数据文件，因此节点的分裂将会比较慢对于innodb的主键尽量用整型，而且是递增的整型如果是无规律的数据将会产生页的分裂，影响速度 索引覆盖查询列要被所使用的索引覆盖。索引覆盖是指 如果查询的列恰好是索引的一部分那么查询只需要在索引文件上进行不需要回行到磁盘进行找数据这种查询速度非常快称之为‘索引覆盖’不是所有类型的索引都可以成为覆盖索引。覆盖索引必须要存储索引的列，而哈希索引、空间索引和全文索引等都不存储索引列的值，所以MySQL只能使用B-Tree索引做覆盖索引 优点：1.索引条目通常远小于数据行大小，只需要读取索引，则mysql会极大地减少数据访问量。 2.因为索引是按照列值顺序存储的，所以对于IO密集的范围查找会比随机从磁盘读取每一行数据的IO少很多。 3.一些存储引擎如myisam在内存中只缓存索引，数据则依赖于操作系统来缓存，因此要访问数据需要一次系统调用 4.innodb的聚簇索引，覆盖索引对innodb表特别有用。(innodb的二级索引在叶子节点中保存了行的主键值，所以如果二级主键能够覆盖查询，则可以避免对主键索引的二次查询) 几种优化场景：1.无WHERE条件的查询优化： 执行计划中，type 为ALL，表示进行了全表扫描 如何改进？优化措施很简单，就是对这个查询列建立索引。如下，1ALERT TABLE t1 ADD KEY(staff_id); 再看一下执行计划 12345678910111213explain select sql_no_cache count(staff_id) from t1\G*************************** 1. row *************************** id: 1select_type: SIMPLE table: t1 type: indexpossible_keys: NULL key: staff_idkey_len: 1 ref: NULL rows: 1023849 Extra: Using indexrow in set (0.00 sec) possible_key: NULL，说明没有WHERE条件时查询优化器无法通过索引检索数据，这里使用了索引的另外一个优点，即从索引中获取数据，减少了读取的数据块的数量。 无where条件的查询，可以通过索引来实现索引覆盖查询，但前提条件是，查询返回的字段数足够少，更不用说select *之类的了。毕竟，建立key length过长的索引，始终不是一件好事情。经过再次查询时间缩短0.13sec 2、二次检索优化1234567891011select sql_no_cache rental_date from t1 where inventory_id&lt;80000;……| 2005-08-23 15:08:00 || 2005-08-23 15:09:17 || 2005-08-23 15:10:42 || 2005-08-23 15:15:02 || 2005-08-23 15:15:19 || 2005-08-23 15:16:32 |+---------------------+79999 rows in set (0.13 sec) 执行计划12345678910111213explain select sql_no_cache rental_date from t1 where inventory_id&lt;80000\G*************************** 1. row *************************** id: 1 select_type: SIMPLE table: t1 type: rangepossible_keys: inventory_id key: inventory_id key_len: 3 ref: NULL rows: 153734 Extra: Using index condition1 row in set (0.00 sec) Extra：Using index condition 表示使用的索引方式为二级检索，即79999个书签值被用来进行回表查询。可想而知，还是会有一定的性能消耗的 尝试针对这个SQL建立联合索引，如下：1alter table t1 add key(inventory_id,rental_date); 执行计划：12345678910111213explain select sql_no_cache rental_date from t1 where inventory_id&lt;80000\G*************************** 1. row *************************** id: 1 select_type: SIMPLE table: t1 type: rangepossible_keys: inventory_id,inventory_id_2 key: inventory_id_2 key_len: 3 ref: NULL rows: 162884 Extra: Using index1 row in set (0.00 sec) Extra：Using index 表示没有会标查询的过程，实现了索引覆盖]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql优化（二）索引]]></title>
    <url>%2F2017%2F05%2F10%2Fmysql%E4%BC%98%E5%8C%96%EF%BC%88%E4%BA%8C%EF%BC%89%E7%B4%A2%E5%BC%95%2F</url>
    <content type="text"><![CDATA[数据库索引优化 索引优化策略1索引类型1.1B-tree索引名叫Btree，大方面看都用的平衡树，但是具体是实现上，各引擎稍有不同比如严格的说INDB引擎使用的是T-treeMyisam，innodb默认使用B-Tree索引排好序的快速查找结构 1.2hash索引在Memory表中默认是hash索引，hash理论时间复杂度O(1) 既然hash查找如此高效，为什么不能用hash索引？1 hash函数计算后的结果是随机的，如果在磁盘上放置数据， 以主键ID为例，那么随着ID的增长 id对应的行在磁盘上随机放置 2 无法对范围查找进行优化 3 无法利用前缀索引，比如 在btree中，field列的值“hellopworld”，并加索引查询xx == helloword，自然可以利用索引，xx == hello 也可以利用索引（左前缀索引），因为hash（‘helloword’）和hash（‘hello’）两者关系仍为随机。 4 排序也无法优化 5 必须回行 也就是说通过索引拿到数据位置，必须回到表中取数据 2：btree索引的常见误区2.1 在where条件常用的列上都加上索引列：where cat_id=3 and price&gt;100;查询第三个栏目，100元以上的商品 Cat_id上或price上都加上索引 只能用上cat_id或price索引，因为独立的索引同时只能用上1个 联合索引（多个列看成整体值建立索引）2.2 在多列上建立索引后查询那个列索引都将发挥作用多列索引上索引发挥作用，需要满足左前缀要求以index（a，b，c）位例（注意和顺序有关）123456789| 语法 | 索引是否发挥作用 ||Where a=3 |是 只使用a列 ||Where a=3 and b=5 |是 使用a b 列 ||Where a=3 and b=5 and c=4 | 是 使用a b c 列 ||Where b=3 / where c=4 |否 ||Where a=3 and c=4 |a列能发挥索引，c不能 ||Where a=3 and b&gt;10 and c=7 |a能利用，b能利用，c不能利用||where a=3 and b like ‘XXX%’ and c=7|a能利用，b能利用，c不能利用||where a=3 and b like ‘%XXX’ |a能利用，b不能利用 | abc三个索引ab相连接，bc相连接，都通则都能用否则断开后面索引都不能 什么是左前缀（左边准确等于几，后面不知道可以） 看题:假设某个表有一个联合索引（C1,C2,C3,C4）以下--只能使用联合索引的C1,C2,C3部分 A where C1=x and C2=x and C4&gt;x and C3=x (C1,C2,C3可以用到联合索引，C4可以用一半) B where C1=x and C2=x and C4=x order by C3=x(C1,C2,C3可以用到联合索引) C where C1=x and C4=x ground by C3,C2(只用C1，若ground byC2,C3则索引为C1,C2,C3) D where C1=? and C5=? order by C2,C3(同上) E where C1=? and C2=? and C5=? order by C2,C3 （查找使用C1,C2 排序使用C3） 希望此题对大家有帮助]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql优化（一）建表]]></title>
    <url>%2F2017%2F05%2F05%2Fmysql%E4%BC%98%E5%8C%96%EF%BC%88%E4%B8%80%EF%BC%89%E5%BB%BA%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[数据库设计建表 表优化与类型选择1．定长与变长分离如 id int占4个字节，char(4)占据4个字符长度也是定长 即每个单元值占据的字节是固定的 核心且常用字段宜建成一张表 注：而varchar，text，blob变长字段适合单方一张表，用主键和核心表关联起来 2．常用字段和不常用字段分离结合网站具体业务分析，分析字段查询场景，查询频度低的字段，单拆分出来 3．在一对多需要关联统计的字段上添加冗余字段空间换时间统计模块下贴子数量如果使用jion in联合查询则短时间内存增加相乘关系列选择原则：字符类优先级 整形&gt;data, time&gt;enum,char&gt;varchar&gt;blob,text列特点分析： 整型：定长没有国家/地区之分,没有字符集的差异。Enum类型：存男和女 底层进行转化成数字。Text 和 blob 无法使用内存临时表（排序等操作只能在磁盘上进行 ） 够用就行，不要慷慨（smallint，varchar（N））原因：大的字段浪费内存，影响速度。 尽力避免使用NULL愿因：NULL 不利于索引]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql数据库忘记密码]]></title>
    <url>%2F2017%2F05%2F01%2Fmysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81%2F</url>
    <content type="text"><![CDATA[数据库忘记密码 11. 开始 --&gt;cmd--&gt; net stop mysql (停用MySQL服务 没启动的可以省略) 找到安装路径 MySQL Server 5.1下的my.ini 打开 my.ini 找到 [mysqld] 然后在下面加上 这句： skip_grant_tables （意思好像是启动MySQL服务的时候跳过权限表认证 ） 然后就启动数据库修改密码了 1 开始 --&gt; cmd --&gt; netstart mysql (启动MySQL服务)---&gt; mysql 回车 ( 如果成功，将出现MySQL提示符) 输入use mysql; （连接权限数据库）。 改密码： 1update user set password=password("要修改的密码")where user="root";（别忘了最后加分号）。 修改失败的话用下面的sql语句 注意5.7以上版本的 ：1updateuser setauthentication_string=password('要修改的密码') where user='root' ; 刷新权限（必须步骤）：flush privileges; 。 退出 quit。 将第3 步的 my.ini里的 skip_grant_tables 去掉（启动MySQL服务的时候不能让他跳过权限表认证 ） 重启MySQL ，再进入，使用用户名root和刚才设置的新密码就可以登录了。]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql密码正确无法登陆]]></title>
    <url>%2F2017%2F03%2F07%2Fmysql-password%2F</url>
    <content type="text"><![CDATA[MySQL root密码正确，却怎么也无法从本地登录提示：11 ERROR 1045 (28000): Access denied for user 'root'@'localhost'(using password: YES) 后来发现mysql库中的user表缺少一个root指向host：localhost的数据项，只有一个root指向host：主机名的数据项，故怎么也无法利用root账户登录MySQL。 总结一点就是root账户缺失了访问localhost主机的账户信息，导致无法本地登录。 那有什么办法恢复root登录呢?11. cmd --&gt; net stop mysql (停用MySQL服务 没启动的可以省略) 找到安装路径 MySQL Server 5.1下的my.ini 打开 my.ini 找到 [mysqld] 然后在下面加上 这句： skip_grant_tables （意思好像是 启动MySQL服务的时候跳过权限表认证 ） 会发现这时无密码就可以登录mysql了。 当然我们还必须修复root账户丢失的数据项。 第一种是因为root账户初始的时候有3条记录，包含root对应localhost，hostname，127.0.0.1三条账户数据，我们可以updatehost为其他两项中一项为localhost即可。 第二种是直接insert一条记录，host为localhost即可 查看一下你的表中user字段用户名是不是root是不是与你连接数据库地用户名一致 总结一下：即使root的host包含了主机名，127.0.0.1那么依然是无法正常登录的，这里必须要有localhost的host才行。 查看数据库mysql表中的host字段： 发现user表host字段中没有localhost，但是我的理解是%代表所有的主机都能登录的，为什么localhost不能呢，同样的情况我在5.0.45版的mysql上面做实验就不会发生localhost无法登录，我当前用的是5.1.57版的，难道是版本的问题? 接下来的修改很明显了：12mysql&gt; updateuser set host='localhost' where user='root' and host='%';mysql&gt; flush privileges; OK，退出mysql，重启mysql就解决问题了]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo标签显示]]></title>
    <url>%2F2016%2F08%2F20%2Farticle-two%2F</url>
    <content type="text"><![CDATA[Next主题标签和分类显示 用命令 :hexo new 文章名字;新建的文章如下1234567---title: article-twodate: 2017-08-30 20:37:32type: ""categories: tags: --- 下面说一下categories是分类 tags是标签有两种形式:1tages: [标签1,标签2,...标签n] 12345tags: - 标签1 - 标签2 ... - 标签n 说一下显示问题:标签显示的时候会有大中小三种，标签的大小是根据不同文章中使用相同标签的次数决定的次数最多的标签显示时字体大加粗。 如下面的图]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo总结]]></title>
    <url>%2F2016%2F08%2F13%2Farticl-one%2F</url>
    <content type="text"><![CDATA[之前布好的个人博客竟然出问题了，没办法又重新来了一遍同样的主题同样主题在此总结一下。 总体来说可以分为四步第一就是把需要安装的软件装好1.安装Node（作用）:用来生成静态页面然后用检查是否安装成功，按下Win和R，打开运行窗口：在新打开的窗口中输入cmd，敲击回车，打开命令行界面。输入:1node -v 显示版本信息说明安装成功 2.下载Git安装文件：安装完成同样我们来检查一下Git是不是安装正确了，打开命令行，输入：1git --version 显示版本信息说明安装成功 github账户的注册和配置打开Github官网，在下图的框中，分别输入自己的用户名，邮箱，密码一定要确认注册，否则无法使用gh-pages！ ##安装Hexo1.下载安装hexo1npm install hexo-cli -g 来试试安装成功没有，输入以下命令查看Hexo的版本信息：1hexo -v 如果出现类似内容说明安装成功啦！1234567891011hexo-cli: 1.0.3os: Windows_NT 10.0.14393 win32 x64http_parser: 2.7.0node: 6.10.2v8: 5.1.281.98uv: 1.9.1zlib: 1.2.11ares: 1.10.1-DEVicu: 58.2modules: 48openssl: 1.0.2k 文件夹里面新建Hexo1hexo init 我们在开始前先执行命令：1npm install 这条命令是用来安装依赖包的，具体安装内容可以在package.json文件里找到。安装好了之后会看到一大串的信息，这里就不贴出来了。现在我们可以看到blog目录下的文件结构是这样的：node_modules：是依赖包public：存放的是生成的页面scaffolds：命令生成文章等的模板source：用命令创建的各种文章themes：主题_config.yml：整个博客的配置db.json：source解析所得到的package.json：项目所需模块项目的配置信息 接下来就是看看主题样式了1hexo server 执行完以后会有：12INFO Start processingINFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop. 然后输入在页面地址栏输入：localhost:4000 ##接下来就是上传到github用编辑器打开你的项目，修改_config.yml文件的一些配置(冒号之后都是有一个半角空格的)：1234deploy: type: git repo: https://github.com/YourgithubName/YourgithubName.github.io.git branch: master 执行安装命令：1npm install hexo-deployer-git --save 之后执行上传到github的命令：123hexo cleanhexo generatehexo deploy 这次的总结就写到这里吧!!! ##2019年重新使用Hexo创建编辑完文章（报错）原因:1文章图片文件夹内含有一个视频文件（500MB）;执行过Hexo hexo generate 然后执行hexo deploy报错原因大概是上传内容超过100MB.2.我将视频删除重新执行hexo generate -d依然报错（我确定不是Git,Hexo问题）解决:把hexo下面的.deploy_git手动删除然后输入Hexo clean;重新执行:1npm install hexo-deployer-git --save 之后执行上传到github的命令：123hexo cleanhexo generatehexo deploy 问题解决 #附件12345hexo cleanhexo g == hexo generatehexo d == hexo deployhexo s == hexo serverhexo n == hexo new]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[win10电源选项设置控制风扇转动]]></title>
    <url>%2F2016%2F08%2F10%2Fwin10%2F</url>
    <content type="text"><![CDATA[最新版win10 :电源选项里面没有节能和性能模式怎么办？ 首先找到控制面板（两种方法）：第一种： 第二种： 点击电源选项 到如下页面 你可能会发现只有平衡没有节能,点击左侧创建电源计划,然后如图操作修改计划名称和上面选择的对应就好了 选择节能点击更改计划,然后点击更改高级电源设置（c） 找到如图红色框部分全部改为被动然后就完工了。]]></content>
  </entry>
</search>